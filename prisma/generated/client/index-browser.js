
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  phone: 'phone',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DriverProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  regionId: 'regionId',
  rating: 'rating',
  status: 'status'
};

exports.Prisma.AdminProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name'
};

exports.Prisma.ClientProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name'
};

exports.Prisma.CarScalarFieldEnum = {
  id: 'id',
  driverId: 'driverId',
  vehicle_type_id: 'vehicle_type_id',
  brand: 'brand',
  model: 'model',
  year: 'year',
  color: 'color',
  license_plate: 'license_plate',
  verification_status: 'verification_status'
};

exports.Prisma.VehicleMediaScalarFieldEnum = {
  id: 'id',
  carId: 'carId',
  url: 'url',
  type: 'type',
  createdAt: 'createdAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  regionId: 'regionId',
  driverId: 'driverId',
  car_id: 'car_id',
  name: 'name',
  from_address: 'from_address',
  to_address: 'to_address',
  distance: 'distance',
  price: 'price',
  currency: 'currency',
  status: 'status',
  trip_datetime: 'trip_datetime',
  notes: 'notes',
  passenger_count: 'passenger_count',
  flight_number: 'flight_number'
};

exports.Prisma.RatingScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  driverId: 'driverId',
  clientId: 'clientId',
  score: 'score',
  comment: 'comment',
  createdAt: 'createdAt'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  driverId: 'driverId',
  type: 'type',
  file_url: 'file_url',
  status: 'status',
  expires_at: 'expires_at'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  action: 'action',
  target_entity: 'target_entity',
  target_id: 'target_id',
  created_at: 'created_at'
};

exports.Prisma.RegionScalarFieldEnum = {
  id: 'id',
  parent_id: 'parent_id',
  name: 'name',
  type: 'type',
  latitude: 'latitude',
  longitude: 'longitude'
};

exports.Prisma.VehicleTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  max_passengers: 'max_passengers',
  max_luggage_standard: 'max_luggage_standard',
  max_luggage_small: 'max_luggage_small'
};

exports.Prisma.RegionTranslationScalarFieldEnum = {
  id: 'id',
  region_id: 'region_id',
  locale: 'locale',
  name: 'name'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  phone: 'phone'
};

exports.Prisma.DriverProfileOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  regionId: 'regionId'
};

exports.Prisma.AdminProfileOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name'
};

exports.Prisma.ClientProfileOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name'
};

exports.Prisma.CarOrderByRelevanceFieldEnum = {
  id: 'id',
  driverId: 'driverId',
  vehicle_type_id: 'vehicle_type_id',
  brand: 'brand',
  model: 'model',
  color: 'color',
  license_plate: 'license_plate'
};

exports.Prisma.VehicleMediaOrderByRelevanceFieldEnum = {
  id: 'id',
  carId: 'carId',
  url: 'url'
};

exports.Prisma.OrderOrderByRelevanceFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  regionId: 'regionId',
  driverId: 'driverId',
  car_id: 'car_id',
  name: 'name',
  from_address: 'from_address',
  to_address: 'to_address',
  currency: 'currency',
  notes: 'notes',
  flight_number: 'flight_number'
};

exports.Prisma.RatingOrderByRelevanceFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  driverId: 'driverId',
  clientId: 'clientId',
  comment: 'comment'
};

exports.Prisma.DocumentOrderByRelevanceFieldEnum = {
  id: 'id',
  driverId: 'driverId',
  file_url: 'file_url'
};

exports.Prisma.AuditLogOrderByRelevanceFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  action: 'action',
  target_entity: 'target_entity',
  target_id: 'target_id'
};

exports.Prisma.RegionOrderByRelevanceFieldEnum = {
  id: 'id',
  parent_id: 'parent_id',
  name: 'name'
};

exports.Prisma.VehicleTypeOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.RegionTranslationOrderByRelevanceFieldEnum = {
  id: 'id',
  region_id: 'region_id',
  locale: 'locale',
  name: 'name'
};
exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  DRIVER: 'DRIVER',
  ADMIN: 'ADMIN',
  SUPERADMIN: 'SUPERADMIN'
};

exports.VehicleVerificationStatus = exports.$Enums.VehicleVerificationStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.MediaType = exports.$Enums.MediaType = {
  PHOTO: 'PHOTO',
  VIDEO: 'VIDEO'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  NEW: 'NEW',
  ACCEPTED: 'ACCEPTED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  DRIVERS_LICENSE: 'DRIVERS_LICENSE',
  VEHICLE_REGISTRATION: 'VEHICLE_REGISTRATION',
  SELFIE_WITH_LICENSE: 'SELFIE_WITH_LICENSE'
};

exports.DocumentStatus = exports.$Enums.DocumentStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.RegionType = exports.$Enums.RegionType = {
  COUNTRY: 'COUNTRY',
  CITY: 'CITY',
  AIRPORT: 'AIRPORT',
  LOCATION: 'LOCATION'
};

exports.Prisma.ModelName = {
  User: 'User',
  DriverProfile: 'DriverProfile',
  AdminProfile: 'AdminProfile',
  ClientProfile: 'ClientProfile',
  Car: 'Car',
  VehicleMedia: 'VehicleMedia',
  Order: 'Order',
  Rating: 'Rating',
  Document: 'Document',
  AuditLog: 'AuditLog',
  Region: 'Region',
  VehicleType: 'VehicleType',
  RegionTranslation: 'RegionTranslation'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
